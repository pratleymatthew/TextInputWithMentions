// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package aqcommon.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the AqCommon module
	public static java.lang.String sUB_AppendDelimitedString(IContext context, java.lang.String _currentString, java.lang.String _stringToAppend, java.lang.String _delimiter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CurrentString", _currentString);
		params.put("StringToAppend", _stringToAppend);
		params.put("Delimiter", _delimiter);
		return (java.lang.String) Core.microflowCall("AqCommon.SUB_AppendDelimitedString").withParams(params).execute(context);
	}
	public static void sUB_AppendDelimitedStringViaStringItem(IContext context, aqcommon.proxies.StringItem _stringItem, java.lang.String _stringToAppend, java.lang.String _delimiter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StringItem", _stringItem == null ? null : _stringItem.getMendixObject());
		params.put("StringToAppend", _stringToAppend);
		params.put("Delimiter", _delimiter);
		Core.microflowCall("AqCommon.SUB_AppendDelimitedStringViaStringItem").withParams(params).execute(context);
	}
	public static mxmodelreflection.proxies.Token sUB_CreateMxReflectionAttributeToken(IContext context, mxmodelreflection.proxies.MxObjectType _mxObjectType, java.lang.String _attributeName, boolean _commitTokenBeforeReturning)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MxObjectType", _mxObjectType == null ? null : _mxObjectType.getMendixObject());
		params.put("AttributeName", _attributeName);
		params.put("CommitTokenBeforeReturning", _commitTokenBeforeReturning);
		IMendixObject result = (IMendixObject)Core.microflowCall("AqCommon.SUB_CreateMxReflectionAttributeToken").withParams(params).execute(context);
		return result == null ? null : mxmodelreflection.proxies.Token.initialize(context, result);
	}
	public static void sUB_CreateMxReflectionAttributeTokenForTokenList(IContext context, mxmodelreflection.proxies.MxObjectType _mxObjectType, java.lang.String _attributeName, java.util.List<mxmodelreflection.proxies.Token> _tokenList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MxObjectType", _mxObjectType == null ? null : _mxObjectType.getMendixObject());
		params.put("AttributeName", _attributeName);
		java.util.List<IMendixObject> listparam_tokenList = null;
		if (_tokenList != null)
		{
			listparam_tokenList = new java.util.ArrayList<>();
			for (var obj : _tokenList) {
				listparam_tokenList.add(obj.getMendixObject());
			}
		}
		params.put("TokenList", listparam_tokenList);

		Core.microflowCall("AqCommon.SUB_CreateMxReflectionAttributeTokenForTokenList").withParams(params).execute(context);
	}
	public static java.util.List<mxmodelreflection.proxies.Token> sUB_CreateMxReflectionAttributeTokenListForMxObjectType(IContext context, mxmodelreflection.proxies.MxObjectType _mxObjectType, boolean _commitListBeforeReturning)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("MxObjectType", _mxObjectType == null ? null : _mxObjectType.getMendixObject());
		params.put("CommitListBeforeReturning", _commitListBeforeReturning);
		java.util.List<IMendixObject> objs = Core.microflowCall("AqCommon.SUB_CreateMxReflectionAttributeTokenListForMxObjectType").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> mxmodelreflection.proxies.Token.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.lang.String sUB_GetApplicationUrlWithoutTrailingSlash(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.String) Core.microflowCall("AqCommon.SUB_GetApplicationUrlWithoutTrailingSlash").withParams(params).execute(context);
	}
	public static java.util.Date sUB_GetBeginningOfDayForDateUTC(IContext context, java.util.Date _dateTime)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DateTime", _dateTime);
		return (java.util.Date) Core.microflowCall("AqCommon.SUB_GetBeginningOfDayForDateUTC").withParams(params).execute(context);
	}
	public static aqcommon.proxies.ENUM_Environment sUB_GetCurrentEnvironment(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.lang.String result = (java.lang.String) Core.microflowCall("AqCommon.SUB_GetCurrentEnvironment").withParams(params).execute(context);
		return result == null ? null : aqcommon.proxies.ENUM_Environment.valueOf(result);
	}
	public static java.util.Date sUB_GetEndOfDayForDateUTC(IContext context, java.util.Date _dateTime)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DateTime", _dateTime);
		return (java.util.Date) Core.microflowCall("AqCommon.SUB_GetEndOfDayForDateUTC").withParams(params).execute(context);
	}
	public static boolean sUB_SyncRequiredModules(IContext context, java.lang.String _delimitedListOfModuleNames, java.lang.String _delimiter)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DelimitedListOfModuleNames", _delimitedListOfModuleNames);
		params.put("Delimiter", _delimiter);
		return (java.lang.Boolean) Core.microflowCall("AqCommon.SUB_SyncRequiredModules").withParams(params).execute(context);
	}
}
