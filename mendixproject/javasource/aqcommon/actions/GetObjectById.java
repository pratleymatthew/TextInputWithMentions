// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;

public class GetObjectById extends CustomJavaAction<IMendixObject>
{
	private java.lang.Long ObjectId;
	private java.lang.String ReturnType;

	public GetObjectById(IContext context, java.lang.Long ObjectId, java.lang.String ReturnType)
	{
		super(context);
		this.ObjectId = ObjectId;
		this.ReturnType = ReturnType;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		IMendixObject mxObject = Core.retrieveId(getContext(), Core.createMendixIdentifier(ObjectId.longValue()) );
		
		if(mxObject.getType().equals(ReturnType) || objectIsSpecialisationOf(mxObject.getType(), ReturnType) ) {
			return mxObject;
		}
		
		_log.error("ID " + ObjectId + " is of type, " + mxObject.getType() + ", not of requested type, " + ReturnType);
		
		return null;		
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetObjectById";
	}

	// BEGIN EXTRA CODE
	private ILogNode _log = Core.getLogger(this.toString());
	private static Boolean objectIsSpecialisationOf(String ObjectToCheckCompleteName, String SuperObjectCompleteName){
		
		IMetaObject meta = Core.getMetaObject(ObjectToCheckCompleteName);
		
		Boolean matchFound = false;
		IMetaObject superObjects[] = new IMetaObject[meta.getSuperObjects().size()];
		superObjects = meta.getSuperObjects().toArray(superObjects);
		for(IMetaObject superObject : superObjects){
			String superName = superObject.getName();
			if( SuperObjectCompleteName.equals(superName) ){
				matchFound = true;
				break;
			}
		}
		
		return matchFound;
	}
	// END EXTRA CODE
}
