// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import com.mendix.core.Core;
import com.mendix.core.CoreRuntimeException;
import com.mendix.datastorage.XPathQuery;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataColumnSchema;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataRow;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTable;
import com.mendix.systemwideinterfaces.connectionbus.data.IDataTableSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.IParameterMap;
import com.mendix.systemwideinterfaces.connectionbus.requests.IRetrievalSchema;
import com.mendix.systemwideinterfaces.connectionbus.requests.types.IOQLTextGetRequest;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import aqcommon.proxies.QueryVariable;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaAssociation;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive.PrimitiveType;

public class ExecuteOQLQuery extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.lang.String OQLString;
	private java.util.List<IMendixObject> __VariableList;
	private java.util.List<aqcommon.proxies.QueryVariable> VariableList;
	private java.lang.Long Amount;
	private java.lang.Long Offset;
	private java.lang.String Entity;

	public ExecuteOQLQuery(IContext context, java.lang.String OQLString, java.util.List<IMendixObject> VariableList, java.lang.Long Amount, java.lang.Long Offset, java.lang.String Entity)
	{
		super(context);
		this.OQLString = OQLString;
		this.__VariableList = VariableList;
		this.Amount = Amount;
		this.Offset = Offset;
		this.Entity = Entity;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.VariableList = java.util.Optional.ofNullable(this.__VariableList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__VariableListElement -> aqcommon.proxies.QueryVariable.initialize(getContext(), __VariableListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		List<IMendixObject> results = null;
		
		try {
			IOQLTextGetRequest ioqlTextGetRequest = Core.createOQLTextGetRequest();
			ioqlTextGetRequest.setQuery(OQLString);
			IParameterMap iParameterMap = ioqlTextGetRequest.createParameterMap();
			IRetrievalSchema iRetrievalSchema = ioqlTextGetRequest.getRetrievalSchema();
			
			for(QueryVariable variable : VariableList) {
				String variableName = variable.getVariableName().replace("$", "");
				
				_logger.debug("variableName :: " + variableName);
				switch(variable.getVariableType()) {
					case StringType:
						String stringValue = variable.getStringValue();
						_logger.debug("String value :: " + stringValue);
						iParameterMap.put(variableName, stringValue);
						break;
					case BooleanType:
						Boolean booleanValue = variable.getBooleanValue();
						_logger.debug("Boolean value :: " + booleanValue);
						iParameterMap.put(variableName, booleanValue);
						break;
					case DateTimeType:
						Long dateTimeValue = variable.getDateTimeValue().getTime();
						_logger.debug("DateTime value :: " + dateTimeValue);
						iParameterMap.put(variableName, dateTimeValue);
						break;
					case Decimal:
						BigDecimal decimalValue = variable.getDecimalValue();
						_logger.debug("Decimal value :: " + decimalValue);
						iParameterMap.put(variableName, decimalValue);
						break;
					case IntegerType:
						Integer integerValue = variable.getIntegerValue();
						_logger.debug("Integer value :: " + integerValue);
						iParameterMap.put(variableName, integerValue);
						break;
					case LongType:
						Long longValue = variable.getLongValue();
						_logger.debug("Long value :: " + longValue);
						iParameterMap.put(variableName, longValue);
						break;
					case AssociatedObjectType:
						String associatedObjectValue = variable.getAssociatedObjectValue();
						_logger.debug("Associated Object value :: " + associatedObjectValue);						
						IMendixIdentifier associatedObject =  (IMendixIdentifier)variable.getMendixObject().getValue(getContext(), associatedObjectValue);
						iParameterMap.put(variableName, associatedObject);
						break;
					default:
						_logger.debug("No variable type specified.");
						break;
				}				
			}
			
			if(Amount != null) {
				Integer amount = Amount.intValue();
				_logger.debug("Amount param :: " + amount);
				iRetrievalSchema.setAmount(amount);
			}
			
			if(Offset != null) {
				Integer offset = Offset.intValue();
				_logger.debug("Offset param :: " + offset);
				iRetrievalSchema.setAmount(offset);
			}
			
			ioqlTextGetRequest.setParameters(iParameterMap);
			IDataTable iDataTable = Core.retrieveOQLDataTable(getContext(), ioqlTextGetRequest);
			_logger.info("Number of rows retrieved: " + iDataTable.getRowCount());
					
			return convertDataTableToMendixList(iDataTable, Entity);
		}
		catch(CoreRuntimeException err) {
			throw err;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteOQLQuery";
	}

	// BEGIN EXTRA CODE
	
	private List<IMendixObject> convertDataTableToMendixList(IDataTable iDataTable, String targetEntityName){
		List<IMendixObject> mxTargetObjectList = new ArrayList<IMendixObject>();
		
		IDataTableSchema tableSchema = iDataTable.getSchema();
		for (IDataRow row : iDataTable.getRows()) {
			IMendixObject mxTargetObject = Core.instantiate(getContext(), targetEntityName);
			for (int i = 0; i < tableSchema.getColumnCount(); i++) {
				IDataColumnSchema columnSchema = tableSchema.getColumnSchema(i);
				_logger.trace("Mapping column "+ columnSchema.getName());
				Object value = row.getValue(getContext(), i);
				IMetaObject targetMeta = mxTargetObject.getMetaObject();
				
				if (value == null) {
					IMetaPrimitive primitive = targetMeta.getMetaPrimitive(columnSchema.getName());
					if (primitive != null) {
						mxTargetObject.setValue(getContext(), columnSchema.getName(), null);
					} else {
						if (getAssociation(mxTargetObject, columnSchema) == null) {
							throw new NullPointerException("Null value found " + columnSchema.getName() + 
									" was not found as association or attribute.");
						}
					} 
					
				} else {
					
					if (value instanceof IMendixIdentifier) {
						_logger.trace("Treating as association");				
						IMetaAssociation association = getAssociation(mxTargetObject, columnSchema);
						if (association != null) {
							mxTargetObject.setValue(getContext(), association.getName(), value);
						} else {
							throw new NullPointerException("Could not find result association " + columnSchema.getName() + " in target object.");
						}
					} else {
						_logger.trace("Treating as value");
						IMetaPrimitive primitive = targetMeta.getMetaPrimitive(columnSchema.getName());
						
						if (primitive == null) {
							throw new NullPointerException("Could not find result attribute " + columnSchema.getName() + " in target object.");
						}
						
						if (value instanceof Integer && primitive.getType() == PrimitiveType.Long) {
							value = (Long) ((Integer) value).longValue();
						} else if (value instanceof Long && primitive.getType() == PrimitiveType.Integer) {
							value = Integer.parseInt(((Long) value).toString()); // not so happy way of conversion
						} else if (value instanceof Double && primitive.getType() == PrimitiveType.Decimal) {
							value = new BigDecimal((Double) value);
						}
						mxTargetObject.setValue(getContext(), columnSchema.getName(), value);
					}
				}
				
			}
			mxTargetObjectList.add(mxTargetObject);
		}		
		
		return mxTargetObjectList;
	}
	
	private static IMetaAssociation getAssociation(IMendixObject targetObj, IDataColumnSchema columnSchema) {
		/* Escaping an alias as described at https://docs.mendix.com/refguide7/oql-select-clause
		 * leads to an error when using dots e.g. (OQL.ExamplePerson_ExamplePersonResult).
		 * Therefore this action accepts the ExamplePerson_ExamplePersonResult part and searches for the
		 * association that has this in it.
		 */
		for (IMetaAssociation association : targetObj.getMetaObject().getDeclaredMetaAssociationsParent()) {
			String name = association.getName();
			name = name.substring(name.indexOf('.') + 1);
			if (name.equals(columnSchema.getName())) {
				return association;
			}
		}
		return null;
	}
	
	private final ILogNode _logger = Core.getLogger("ExecuteOQLQuery");
	// END EXTRA CODE
}
