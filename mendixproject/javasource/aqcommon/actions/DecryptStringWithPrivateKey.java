// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import java.security.PrivateKey;
import java.util.Base64;
import javax.crypto.Cipher;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import aqcommon.CertificateHelper;

/**
 * Decrypts a string using the RSA algorithm and the private key from a pfx file.
 * 
 * PfxFileName : The name of the file stored in resources folder, e.g. 'MyPfxFile.pfx'. Can also be a path from the resources folder, e.g. 'certs\\MyPfxFile.pfx'
 * PfxPassword: The password for the pfx file
 * PfxAlias: The alias for the pfx file
 * EncryptedString: The string that you wish to decrypt.
 * 
 * Returns the decrypted string.
 */
public class DecryptStringWithPrivateKey extends CustomJavaAction<java.lang.String>
{
	private java.lang.String PfxFileName;
	private java.lang.String PfxPassword;
	private java.lang.String PfxAlias;
	private java.lang.String EncryptedString;

	public DecryptStringWithPrivateKey(IContext context, java.lang.String PfxFileName, java.lang.String PfxPassword, java.lang.String PfxAlias, java.lang.String EncryptedString)
	{
		super(context);
		this.PfxFileName = PfxFileName;
		this.PfxPassword = PfxPassword;
		this.PfxAlias = PfxAlias;
		this.EncryptedString = EncryptedString;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		if(this.PfxFileName == null || this.PfxFileName.equalsIgnoreCase(""))
			throw new IllegalArgumentException("PfxFileName cannot be empty.");
						
		PrivateKey pk = CertificateHelper.GetPrivateKeyFromPfxFile(this.PfxFileName, this.PfxPassword, this.PfxAlias);
		
		Cipher cipher =Cipher.getInstance("RSA");
		
		cipher.init(Cipher.DECRYPT_MODE, pk);

		byte[] decrypted = cipher.doFinal(Base64.getDecoder().decode(this.EncryptedString));
				
		return new String(decrypted);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DecryptStringWithPrivateKey";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
